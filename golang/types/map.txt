The process of map growth and evacuation in Go occurs when the map's load factor exceeds 6.5, triggering the allocation of a new bucket array that is twice the size of the previous one. During this phase, Go enters a state called "growing," where incremental evacuation occurs. This means that elements from old buckets are gradually rehashed and moved into the new bucket array during each read or write operation.

Go performs lookups and updates by checking both the old and new bucket arrays until all buckets have been evacuated. A bucket is marked as "evacuated" once all its key-value pairs have been moved to the new array. The old bucket array is discarded once evacuation is complete, and only the new array is used for subsequent operations.

Buckets have internal flags that indicate their state:
- Empty: No key-value pairs.
- Evacuated: Fully moved to the new array.
- Non-Evacuated: Still in the old array, awaiting transfer.

If a new key is added during the evacuation phase, and no operations are performed on old keys, Go handles both old and new bucket arrays until evacuation is complete. If the new bucket array overflows during this phase, the evacuation process continues alongside any necessary bucket growth management.

Evacuation is tracked with a pointer or counter that increments as each bucket is moved, ensuring the entire old array is transferred before being discarded. When Go encounters an evacuated bucket during a read or write, it uses a marker to redirect operations to the new bucket array.